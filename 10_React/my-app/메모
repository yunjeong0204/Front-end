<chapter12>
- UnitCalculator.jsx
- UnitCounter.jsx
- UnitInput.jsx

<chapter13>
13.1.1.1
> WelcomeDialog.jsx
: FancyBorder 컴포넌트 안에 있는 모든 자식 요소들은 children이라는 이름의 props로 전달됨 


Containment(컴포넌트에서 다른 컴포넌트를 담기)
• props에 기본적으로 들어있는 children 속성을 사용

<chapter15>
스타일 사용하기
: styled.주고싶은곳``
매개변수로 props로 줌
width: ${props => props.width};
width: ${props => props.width || '100px'};
height: ${props => props.height || '40px'};
color: ${props => props.dark ? 'white' : 'black'}; props.dark가 ture면 white값
background: ${props => props.dark ? 'black' : 'white'};
<Button width="200px" height="60px">Nornal</Button>
버튼에 width, height값을 안 줬을 때 100px, 40px이 들어감
<Button dark={true}>Dark</Button> 
버튼에 dark ture값을 주었기때문에 white css 적용
/* 4. 여러 줄의 스타일 구문을 조건부로 설정해야 하는 경우 css를 불러와 사용해야한다 */
/* props.inverted가 true일 때 스타일 적용 */
${props => 
  props.inverted && 
  css`
    background: white;
    color: #1f1f1f;
    border: 2px solid white;
    &:hover{
      background: #1f1f1f;
      color: white;
    }
`}
<Button inverted>Invered</Button>
버튼에 inverted값을 주었기 때문에(true값을 준거임 그래서 스타일이 적용이된다)

23.06.05
<chapter7> useCallback


------------------------------
10_React> my-todo만들기
새로운 React앱 만들기
경로 : npx create-react-app <your-project-name>
- App.js 설명보기
- package.json에서 설치가 됐는지 확인가능

렌더링을 App.js에서 하기

console.log(props.todos); //props는 객체, todos는 배열 -> 객체안 배열 담는 법


{/* Quiz: TodoListItem으로 이루어진 배열로 반환하여 반복렌더링 하기 */}


color: ${props => props.checked && '#22b8cf'};
props.checked가 true면 스타일 적용함

제어 컴포넌트 만들기 
const [value, setValue] = useState('');

const handleChange = (e) => {
  setValue(e.target.value);
};


state는 렌더링과 관련된 것만 넣는다

페키지 설치
npm install uuid
App.js에서 import {v4 us uuidv4 } from "uuid"; 별칭을 uuidv4라고 줘서 별칭사용해야함
App.js - const todo -> id를 id: uuidv4()로 바꾸기


--------------------
<chapter16>
simpleRouter.jsx
<Route index element={<MainPage />}/> : index 속성에 메인페이지 연결됨
{/* path는 경로를 의미 */}
<Route path='/games' element={<GamePage />} /> {/* /games로 접속하면 GamePage컴포넌트가 렌더링 */}
: localhost:3000/games라고 쓰면 GamePage가 보여짐

MainPage.jsx
Link 컴포넌트 = a태그

GamePage.jsx
{/* Outlet: Nested Route의 자식 엘리먼트를 보여주는 역할 */}
<Outlet /> 은 한 번만 사용가능

AboutPage.jsx
url에서 쿼리스트링을 가져오는 편안 훅이 있다.
/about?detail=true&mode=1 ->
detail: true
mode: 1 이 나옴

NoMathchPage.jsx
{/* 위의 설정한 라우팅 경로 이외에 경우 */}
<Route path='*'/> {/* *의 의미는 match anything */}
경로에 없는 거 칠 때 나오게 하는 것
ㅁ

